(function(){var P$=Clazz.newPackage("org.jmol.export"),p$1={},I$=[[0,'javajs.util.M4','org.jmol.util.Logger','javajs.util.OC','java.io.ByteArrayOutputStream','org.jmol.viewer.Viewer','javajs.util.Lst','javajs.util.Measure']],$I$=function(i,n){return((i=(I$[i]||(I$[i]=Clazz.load(I$[0][i])))),!n&&i.$load$&&Clazz.load(i,2),i)};
/*c*/var C$=Clazz.newClass(P$, "_StlExporter", null, 'org.jmol.export._VrmlExporter');

C$.$clinit$=2;

Clazz.newMeth(C$, '$init$', function () {
this.m4a=Clazz.new_($I$(1,1));
},1);

C$.$fields$=[['Z',['isDebug'],'I',['nTri'],'S',['header'],'O',['oc','javajs.util.OC','bos','java.io.ByteArrayOutputStream','m4','javajs.util.M4','lstMatrix','javajs.util.Lst','m4a','javajs.util.M4']]]

Clazz.newMeth(C$, 'c$', function () {
;C$.superclazz.c$.apply(this,[]);C$.$init$.apply(this);
this.useTable=null;
this.noColor=true;
this.isDebug=$I$(2).debugging;
if (!this.isDebug) {
this.oc=Clazz.new_($I$(3,1));
this.oc.setBigEndian$Z(false);
this.oc.setParams$javajs_api_BytePoster$S$Z$java_io_OutputStream(null, null, false, this.bos=Clazz.new_($I$(4,1)));
}}, 1);

Clazz.newMeth(C$, 'outputHeader$', function () {
this.header=("solid model generated by Jmol " + $I$(5).getJmolVersion$() + "                                                                                " ).substring$I$I(0, 80);
if (this.isDebug) {
this.out.append$S(this.header);
this.out.append$S("\n");
} else {
this.oc.write$BA$I$I(this.header.getBytes$(), 0, 80);
this.oc.write$BA$I$I(Clazz.array(Byte.TYPE, [4]), 0, 4);
}this.lstMatrix=Clazz.new_($I$(6,1));
this.m4=Clazz.new_($I$(1,1));
this.m4.setIdentity$();
this.lstMatrix.addLast$O(this.m4);
this.outputInitialTransform$();
});

Clazz.newMeth(C$, 'pushMatrix$', function () {
this.lstMatrix.addLast$O(this.m4);
this.m4=$I$(1).newM4$javajs_util_M4(this.m4);
});

Clazz.newMeth(C$, 'popMatrix$', function () {
this.m4=this.lstMatrix.removeItemAt$I(this.lstMatrix.size$() - 1);
});

Clazz.newMeth(C$, 'output$S', function (data) {
});

Clazz.newMeth(C$, 'outputChildStart$', function () {
});

Clazz.newMeth(C$, 'outputChildClose$', function () {
});

Clazz.newMeth(C$, 'outputRotation$javajs_util_A4', function (a) {
this.m4a.setToAA$javajs_util_A4(a);
this.m4.mul$javajs_util_M4(this.m4a);
});

Clazz.newMeth(C$, 'outputAttrPt$S$javajs_util_T3', function (attr, pt) {
this.outputAttr$S$F$F$F(attr, pt.x, pt.y, pt.z);
});

Clazz.newMeth(C$, 'outputAttr$S$F$F$F', function (attr, x, y, z) {
this.m4a.setIdentity$();
if (attr === "scale" ) {
this.m4a.m00=x;
this.m4a.m11=y;
this.m4a.m22=z;
} else if (attr === "translation" ) {
this.m4a.m03=x;
this.m4a.m13=y;
this.m4a.m23=z;
}this.m4.mul$javajs_util_M4(this.m4a);
});

Clazz.newMeth(C$, 'outputGeometry$javajs_util_T3A$javajs_util_T3A$HA$IAA$HA$I$I$javajs_util_BS$I$javajs_util_Lst$java_util_Map$javajs_util_P3', function (vertices, normals, colixes, indices, polygonColixes, nVertices, nPolygons, bsPolygons, faceVertexMax, colorList, htColixes, offset) {
for (var i=0; i < nPolygons; i++) {
if (bsPolygons != null  && !bsPolygons.get$I(i) ) continue;
var face=indices[i];
p$1.writeFacet$javajs_util_T3A$IA$I$I$I.apply(this, [vertices, face, 0, 1, 2]);
if (faceVertexMax == 4 && face.length >= 4  && face[2] != face[3] ) p$1.writeFacet$javajs_util_T3A$IA$I$I$I.apply(this, [vertices, face, 2, 3, 0]);
}
});

Clazz.newMeth(C$, 'writeFacet$javajs_util_T3A$IA$I$I$I', function (vertices, face, i, j, k) {
this.tempQ1.setT$javajs_util_T3(vertices[face[i]]);
this.tempQ2.setT$javajs_util_T3(vertices[face[j]]);
this.tempQ3.setT$javajs_util_T3(vertices[face[k]]);
this.m4.rotTrans$javajs_util_T3(this.tempQ1);
this.m4.rotTrans$javajs_util_T3(this.tempQ2);
this.m4.rotTrans$javajs_util_T3(this.tempQ3);
$I$(7).calcNormalizedNormal$javajs_util_T3$javajs_util_T3$javajs_util_T3$javajs_util_T3$javajs_util_T3(this.tempQ1, this.tempQ2, this.tempQ3, this.tempV1, this.tempV2);
if (Float.isNaN$F(this.tempV1.x)) {
return;
}p$1.writePoint$S$javajs_util_T3.apply(this, ["facet normal", this.tempV1]);
p$1.writePoint$S$javajs_util_T3.apply(this, ["outer loop\nvertex", this.tempQ1]);
p$1.writePoint$S$javajs_util_T3.apply(this, ["vertex", this.tempQ2]);
p$1.writePoint$S$javajs_util_T3.apply(this, ["vertex", this.tempQ3]);
if (this.isDebug) {
this.out.append$S("endloop\nendfacet\n");
} else {
this.oc.writeByteAsInt$I(0);
this.oc.writeByteAsInt$I(0);
}this.nTri++;
}, p$1);

Clazz.newMeth(C$, 'finalizeOutput$', function () {
if (this.isDebug) {
this.out.append$S("endsolid model\n");
} else {
var b=this.bos.toByteArray$();
b[80]=((this.nTri & 255)|0);
b[81]=(((this.nTri >> 8) & 255)|0);
b[82]=(((this.nTri >> 16) & 255)|0);
b[83]=(((this.nTri >> 24) & 255)|0);
this.out.write$BA$I$I(b, 0, b.length);
}return this.finalizeOutput2$();
});

Clazz.newMeth(C$, 'outputCircle$javajs_util_P3$javajs_util_P3$F$H$Z', function (pt1, pt2, radius, colix, doFill) {
});

Clazz.newMeth(C$, 'plotText$I$I$I$H$S$org_jmol_util_Font', function (x, y, z, colix, text, font3d) {
});

Clazz.newMeth(C$, 'writePoint$S$javajs_util_T3', function (s, p) {
if (this.isDebug) this.out.append$S(s);
p$1.writeFloat$F.apply(this, [p.x]);
p$1.writeFloat$F.apply(this, [p.y]);
p$1.writeFloat$F.apply(this, [p.z]);
if (this.isDebug) this.out.append$S("\n");
}, p$1);

Clazz.newMeth(C$, 'writeFloat$F', function (f) {
if (this.isDebug) this.out.append$S(" " + new Float(f).toString());
 else this.oc.writeInt$I(Float.floatToIntBits$F(f));
}, p$1);
})();
;Clazz.setTVer('3.2.9-v1');//Created 2020-06-01 14:49:33 Java2ScriptVisitor version 3.2.9-v1 net.sf.j2s.core.jar version 3.2.9-v1
